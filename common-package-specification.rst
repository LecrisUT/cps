============================================
        Common Package Specification
============================================

:Version: 0.4

This document describes the schema for Common Package Specification files. A Common Package Specification file (hereafter "CPS") is a mechanism for describing how users may consume a package. "User" here refers to another package, not an end user. CPS deals with building software.

CPS is based on `JSON`_. A CPS file is a valid JSON object.

.. raw:: html

  <style>
    html {
      color: black;
      background: white;
      font-family: sans;
    }
    table.docinfo { margin: 2em 0; }
    p, li { text-align: justify; }
    .section .section { padding: 0 2em; }
    .title {
      padding: 0.1em;
      box-shadow: 0 0.3em 0.2em #ddd;
      border: 1px solid #eee;
      border-radius: 0.3em;
      background: #f8f8f8;
    }
    h3 {
      padding: 0.2em;
      border: 0 solid #aaa;
      border-width: 0.1em 0;
      background: #eee;
    }
    .hidden { display: none; }
    code.type { color: #172; font-weight: bold; }
    code.keyword { color: #621; font-weight: bold; }
    code.string { color: #d32; }
    code.attribute { color: #15a; }
    code.object { color: #294; }
    code.object:before { content: "<"; }
    code.object:after { content: ">"; }
    .applies-to { font-size: 80%; color: #777; }
    .path { color: #641; }
    .glob { color: #b92; }
    .var { color: #852; font-style: italic; }
    .var:before { content: "<"; }
    .var:after { content: ">"; }
    .env { color: #591; }

  </style>

.. role:: hidden
    :class: hidden

.. role:: applies-to
    :class: applies-to

.. role:: object(code)
    :class: object

.. role:: attribute(code)
    :class: attribute

.. role:: keyword(code)
    :class: keyword

.. role:: type(code)
    :class: type

.. role:: string(code)
    :class: string

.. role:: path(code)
    :class: path

.. role:: glob(code)
    :class: glob

.. role:: var(code)
    :class: var

.. role:: env(code)
    :class: env

.. contents::

History
=======

In the beginning, there was anarchy. Building a project which consumed a different, external project typically involved hand coding build directives based on assumptions where the external would be located.

Along came pkg-config. This was an improvement, but it was designed for UNIX-like platforms and isn't entirely portable. Also, while pkg-config does an adequate job describing the necessary compile and link flags to consume a package, this information is not always sufficient.

Some time later, CMake entered the scene, eventually gaining its own mechanism to describe a package. While this system solved many earlier problems, it relies on the CMake language and is therefore tightly coupled to that build system.

CPS attempts to solve these issues by taking the lessons learned by CMake and providing compatible information in a format that is not tied to the language of a particular build system.

Overview
========

A CPS file provides a description of a package that is intended to be consumed by other packages that build against that package. By providing a detailed, flexible, and language-agnostic description, CPS aims to make it easy to portably consume packages, regardless of build systems used.

Like pkg-config files and CMake package configuration files, CPS files are intended to be produced by the package provider, and included in the package's distribution. Additionally, the CPS file is not intended to cover all possible configurations of a package; rather, it is meant to be generated by the build system and to describe the artifacts for a single architecture.

One important note, however, is that while CPS includes support for executable targets (typically used for making available code generation tools), CPS does *not* try to provide a portable mechanism for specifying how such a tool should be invoked. This is not a problem that lends itself to simple, generic solutions. It is left to the consumer to know how to do this, and/or to the package to provide additional, tool-specific utilities for this purpose.

Package Schema
==============

Objects
'''''''

:object:`Package`\ :hidden:`(Object)`
-------------------------------------

The root of a CPS document is a :object:`package` object. A :object:`package` object describes a single package.

:object:`Requirement`\ :hidden:`(Object)`
-----------------------------------------

A :object:`requirement` describes the specifics of a package dependency.

:object:`Component`\ :hidden:`(Object)`
---------------------------------------

A :object:`component` is a consumable part of a package. Typical components include libraries and executables.

:object:`Configuration`\ :hidden:`(Object)`
-------------------------------------------

A :object:`configuration` holds attributes that are specific to a particular configuration of a :object:`component`.

Attributes
''''''''''

An optional attribute may have the value :keyword:`null`. This shall be equivalent to omitting the attribute.

:attribute:`Compat-Version`
---------------------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies the oldest version of the package with which this version is compatible. This information is used when a consumer requests a specific version. If the version requested is equal to or newer than the :attribute:`Compat-Version`, the package may be used.

If not specified, the package is not compatible with previous versions (i.e. :attribute:`Compat-Version` is implicitly equal to :attribute:`Version`).

:attribute:`Compile-Flags`
--------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of additional flags that must be supplied to the compiler when compiling code that consumes the component.

:attribute:`Components` :applies-to:`(Package)`
-----------------------------------------------

:Type: :type:`map` of :type:`string` to :object:`component`
:Applies To: :object:`package`
:Required: Yes

Specifies the components which the package provides. Keys are the component names.

:attribute:`Components` :applies-to:`(Requirement)`
---------------------------------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`requirement`
:Required: No

Specifies a list of components which must be present in the required package in order for the requirement to be satisfied. Although the build tool will generally produce an error if a consumer uses a component which in turn requires a component that was not found, early specification via this attribute may help build tools to diagnose such issues earlier and/or produce better diagnostics.

:attribute:`Configuration`
--------------------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: Special

Specifies the name of the configuration described by a configuration-specific ``.cps`` (see `Configuration Merging`_). This attribute is required in a configuration-specific ``.cps``, and ignored otherwise.

:attribute:`Configurations` :applies-to:`(Package)`
---------------------------------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies the configurations that are available. See `Package Configurations`_ for a description of how configurations are used.

:attribute:`Configurations` :applies-to:`(Component)`
-----------------------------------------------------

:Type: :type:`map` of :type:`string` to :object:`configuration`
:Applies To: :object:`component`
:Required: No

Specifies a set of configuration-specific attributes for a :object:`component`. Keys are the configuration names.

:attribute:`Cps-Path`
---------------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies the directory portion location of the ``.cps`` file. This shall be an "absolute" path which starts with ``@prefix``. This provides an additional mechanism by which the tool may deduce the package's prefix, since the absolute location of the ``.cps`` file will be known by the tool. (See also `Prefix Determination`_.)

:attribute:`Cps-Version`
------------------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies the version of the CPS to which this ``.cps`` file conforms. This may be used by tools to provide backwards compatibility in case of compatibility-breaking changes in the CPS. If not specified, behavior is implementation defined.

:attribute:`Default-Components`
-------------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies a list of components that should be inferred if a consumer specifies a dependency on a package, but not a specific component.

:attribute:`Definitions`
------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of compile definitions that must be defined when compiling code that consumes the component.

:attribute:`Hints`
------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`requirement`
:Required: No

Specifies a list of paths where a required dependency might be located. When given, this will usually provide the location of the dependency as it was consumed by the package when the package was built, so that consumers can easily find (correct) dependencies if they are in a location that is not searched by default.

:attribute:`Includes`
---------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of directories which should be added to the include search path when compiling code that consumes the component. If a path starts with ``@prefix@``, the package's install prefix is substituted (see `Package Searching`_). This is recommended, as it allows packages to be relocatable.

:attribute:`Link-Flags`
-----------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of additional flags that must be supplied to the linker when linking code that consumes the component.

:attribute:`Link-Libraries`
---------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of additional libraries that must be linked against when linking code that consumes the component. (Note that packages should avoid using this attribute if at all possible. Use `Requires (Component)`_ instead whenever possible.)

:attribute:`Link-Only`
----------------------

:Type: :type:`bool`
:Applies To: :object:`requirement`
:Required: No

Specifies that consumers of a component which requires another component should apply only the required component's link dependencies when consuming the requiring component, and not additional properties such as compile and include attributes. If :keyword:`false` or omitted, the attributes of the required component shall be transitively applied to a consumer of the requiring component as if the required component was consumed directly.

:attribute:`Location`
---------------------

:Type: :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: Depends

Specifies the location of the component. The exact meaning of this attribute depends on the component type, but typically it provides the path to the component's primary artifact, such as a ``.so`` or ``.jar``.

If the path starts with ``@prefix@``, the package's install prefix is substituted (see `Package Searching`_). This is recommended, as it allows packages to be relocatable.

This attribute is required for :object:`component`\ s that are not of :string:`"interface"` :attribute:`Type`.

:attribute:`Name`
-----------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: Yes

Specifies the canonical name of the package. In order for searching to succeed, this must exactly match the name of the CPS file without the ``.cps`` suffix.

:attribute:`Requires` :applies-to:`(Component)`
-----------------------------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies additional components required by a component. This is used, for example, to indicate transitive dependencies. Relative component names are interpreted relative to the current package. Absolute component names must refer to a package required by this package (see `Requires (Package)`_).

:attribute:`Requires` :applies-to:`(Package)`
---------------------------------------------

:Type: :type:`map` of :type:`string` to :object:`requirement`
:Applies To: :object:`package`
:Required: No

Specifies additional packages that are required by this package. Keys are the name of another required package. Values are a valid :object:`requirement` object or :keyword:`null` (equivalent to an empty :object:`requirement` object) describing the package required.

:attribute:`Type`
-----------------

:Type: :type:`string` (restricted)
:Applies To: :object:`component`
:Required: Yes

Specifies the type of a component. The component type affects how the component may be used. Officially supported values are :string:`"archive"` (C/C++ static library), :string:`"dylib"` (C/C++ shared library), :string:`"module"` (C/C++ plugin library), :string:`"jar"` (Java Archive), and :string:`"interface"`. If the type is not recognized by the parser, the component shall be ignored. (Parsers are permitted to support additional types as a conforming extension.)

A :string:`"dylib"` is meant to be linked at compile time; the :attribute:`Location` specifies the artifact required for such linking (i.e. the import library on PE platforms). A :string:`"module"` is meant to be loaded at run time with :code:`dlopen` or similar; again, the :attribute:`Location` specifies the appropriate artifact.

An :string:`"interface"` component is a special case; it may have the usual attributes of a component, but does not have a location. This can be used to create "virtual" components that do not have an associated artifact.

:attribute:`Version` :applies-to:`(Package)`
--------------------------------------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies the version of the package. Although there is no restriction on the format of the version text, successful version matching may impose restrictions.

If not provided, the CPS will not satisfy any request for a specific version of the package.

:attribute:`Version` :applies-to:`(Requirement)`
------------------------------------------------

:Type: :type:`string`
:Applies To: :object:`requirement`
:Required: No

Specifies the required version of a package. If omitted, any version of the required package is acceptable. Semantics are the same as for the :attribute:`Version` attribute of a :object:`package`.

Notes
'''''

- Unless otherwise specified, a relative file path appearing in a CPS shall be interpreted relative to the ``.cps`` file.

- Unless otherwise specified, unrecognized attributes shall be ignored. This makes it easier for tools to add tool-specific extensions. (It is *strongly* recommended that the names of any such attributes start with ``X-<tool>-`` (where ``<tool>`` is the name of the tool which introduced the extension) in order to reduce the chance of conflicts with newer versions of the CPS.)

Component Specification
=======================

Package, component and configuration names may consist of ASCII letters, numbers, hyphens (``-``), and underscores (``_``), and may not contain forward-stroke (``/``) or at-sign (``@``). Colon (``:``) may be used in component and configuration names, but not package names. The behavior of other characters is implementation defined. Portable packages are recommended to use only those characters which are expressly permitted.

A CPS component specification consists of either a package name, component name, or package-component name, either of which may optionally specify a configuration. A colon (``:``) is used to separate a package name from a component name, and always precedes a component name without a package name. A component specification including a package name is an "absolute" name. A component specification without a package name is a "relative" name; the package name in such case is implicitly the same as the package specification in which such name appears. The package and/or component name may be followed by the at-sign (``@``) and a configuration name. The special case of using the at-sign as a configuration name (e.g. ``foo:foo-core@@``) means that the named configuration is the same as the configuration in which the name appears. (For example, the component ``foo-ui`` has non-configuration-specific :attribute:`Requires` :string:`":foo-core@@"` and :attribute:`Configurations` :string:`"A"` and :string:`"B"`. The :string:`"A"` configuration of ``foo-ui`` therefore requires ``:foo-core@A``, and similar for other configurations.)

If a requirement does not specify a configuration, the *consumer* chooses the most appropriate configuration. This allows the consumer to, for example, link to the debug libraries of an indirect dependency when the consumer is build in debug mode, even if the consumer always uses the optimized configuration of the direct dependency.

Package Configurations
======================

Configurations provide a mechanism for a package to provide multiple configurations from a single distribution. Such configurations might include separate debug and release libraries, builds with and without thread safety, and so forth. The possible configurations are determined by each individual package, and it is left to the consumer and build system to decide when and how to select a non-default configuration.

When a consumer consumes a component, the build system must determine the attribute values for that component by selecting which configuration of the component to use (if the component has multiple configurations). It is recommended that build systems select a configuration as follows:

- For each package, the consumer shall have a mechanism for providing a list of preferred configurations. The first configuration in this list which matches an available configuration of the component shall be used. (If the build system supports multiple configurations, it is recommended that the consuming project may specify different values and/or order of this list depending on its own active configuration.)
- If the build system supports multiple configurations, the build system may implement a mechanism to prefer a configuration which "matches" the consuming project's active configuration.
- The package's `Configurations (Package)`_ shall be searched. The first configuration in this list which matches an available configuration of the component shall be used.

The value of an attribute for a component is determined in one of two ways: If the selected :object:`configuration` of the :object:`component` has the attribute, that value is used. Otherwise, if the :object:`component` directly has the requested attribute, that value is used. This allows a configuration-specific attribute to override an attribute value that is not configuration-specific. If the attribute is required, and is not present on either the selected :object:`configuration`, or the non-configuration-specific attributes of the :object:`component`, then the CPS is ill-formed. Note that a value of :keyword:`null` satisfies the condition of having the attribute. A value of :keyword:`null` has the usual meaning where :keyword:`null` is an acceptable value for the attribute; otherwise, a value of :keyword:`null` shall be treated as the attribute being unset (and shall suppress falling back to the non-configuration-specific value).

Configuration Merging
'''''''''''''''''''''

Some build systems may desire to output separate specifications per configuration, and/or to output separate CPS files per component. This is especially useful to permit piecemeal installation of individual components and/or configurations (for example, a "base" package with release libraries and common components, an optional package with debug libraries, and another optional package with optional components).

When a tool locates a CPS file, :var:`name`\ :path:`.cps`, the tool shall look in the same directory for any files named :var:`name`\ :path:`:`\ :glob:`*`\ :path:`.cps`,  :var:`name`\ :path:`@`\ :glob:`*`\ :path:`.cps`, and :var:`name`\ :path:`:`\ :glob:`*`\ :path:`@`\ :glob:`*`\ :path:`.cps` (the asterisk (``*``) represents file globbing). If any such package specifications are found, they shall be loaded at the same time, and their contents appended to the information loaded from the base CPS.

A ``.cps`` file whose name contains ``@`` is a configuration-specific CPS. The structure of a configuration-specific CPS is the same as a common CPS, with three exceptions:

- The per-configuration specification must contain the Configuration_ attribute.
- The per-configuration specification may not specify any :object:`component` attributes (e.g. :attribute:`Type`).
- An attribute on a :object:`component` is considered to belong instead to the component-configuration identified by the configuration-specific CPS.

The order in which the data from multiple CPS files is appended is implementation-defined.

Package Searching
=================

Tools shall locate a package by searching for a file :var:`name`\ :path:`.cps` or :var:`name`\ :path:`-`\ :glob:`*`\ :path:`.cps` (where the asterisk (``*``) is one or more characters excluding colon (``:``) and at-sign (``@``), allowing ``.cps`` files to supply a version number as part of their name so that multiple versions may be co-installed) in the following paths:

- :var:`prefix`\ :path:`/cps/` :applies-to:`(Windows)`
- :var:`prefix`\ :path:`/`\ :var:`name`\ :path:`.framework/Resources/CPS/` :applies-to:`(MacOS)`
- :var:`prefix`\ :path:`/`\ :var:`name`\ :path:`.framework/Versions/`\ :glob:`*`\ :path:`/Resources/CPS/` :applies-to:`(MacOS)`
- :var:`prefix`\ :path:`/`\ :var:`name`\ :path:`.app/Contents/Resources/CPS/` :applies-to:`(MacOS)`
- :var:`prefix`\ :path:`/`\ :var:`libdir`\ :path:`/cps/`\ :var:`name`\ :path:`/`\ :glob:`*`\ :path:`/`
- :var:`prefix`\ :path:`/`\ :var:`libdir`\ :path:`/cps/`\ :var:`name`\ :path:`/`
- :var:`prefix`\ :path:`/`\ :var:`libdir`\ :path:`/cps/`
- :var:`prefix`\ :path:`/share/cps/`\ :var:`name`\ :path:`/`\ :glob:`*`\ :path:`/`
- :var:`prefix`\ :path:`/share/cps/`\ :var:`name`\ :path:`/`
- :var:`prefix`\ :path:`/share/cps/`

The placeholder :var:`name` shall represent the name of the package to be located, and shall include both the proper case name, and the name converted to lower case. The placeholder :var:`libdir` shall be the platform defined directories, sans root prefix, in which matching architecture and/or architecture-neutral libraries reside (e.g. :path:`lib`, :path:`lib32`, :path:`lib64`, :path:`lib/i386-linux-gnu`...). The placeholder :var:`prefix` shall represent one of the set of default install prefixes to be searched, which shall include, at minimum and in order, the set of paths (separated by :path:`;` on Windows, :path:`:` otherwise) in the environment variable :env:`CPS_PATH`, :path:`/usr/local`, and :path:`/usr`. In addition, for all such package-neutral prefixes :var:`prefix-root`, the package-specific prefix :var:`prefix-root`\ :path:`/`\ :var:`name` shall also be considered. The complete list of search paths, above, shall be considered in the order specified above, for each prefix, before the next prefix is searched. Package-specific prefixes shall be searched before package-neutral prefixes.

It is recommended that tools should also provide a mechanism for specifying the path to a specific CPS which may be used to override the default search, or to provide the location of a package which is not installed to any of the standard search paths.

Prefix Determination
''''''''''''''''''''

In order to determine the package prefix, which may appear in various attributes as ``@prefix@``, it is necessary to determine the effective prefix from the canonical location of the ``.cps`` file. This can be accomplished in three ways:

- If the package specifies a :attribute:`Cps-Path`, that value shall be used.
- Otherwise, if the tool has just completed a search for the ``.cps``, as described above, the prefix is known from the path which was searched.
- Otherwise, the prefix shall be deduced as follows:

  - The path is initially taken to be the directory portion (i.e. without file name) of the absolute path to the ``.cps`` file.
  - :applies-to:`(MacOS)` If the tail-portion matches :path:`/Resources/` or :path:`/Resources/CPS/`, then:

    - The matching portion is removed.
    - If the tail-portion of the remaining path matches :path:`/Versions/`\ :glob:`*`\ :path:`/`, that portion is removed.
    - If the tail-portion of the remaining path matches :path:`/`\ :var:`name`\ :path:`.framework/` or :path:`/`\ :var:`name`\ :path:`.app/Contents/`, that portion is removed.

  - Otherwise:

    - If the tail-portion of the path matches any of :path:`/cps/`, :path:`/`\ :var:`name`\ :path:`/cps/` or :path:`/cps/`\ :var:`name`\ :path:`/`, the longest such matching portion is removed.
    - If the tail-portion of the remaining path matches any of :path:`/`\ :var:`libdir`\ :path:`/` or :path:`/share/`, that portion is removed.

.. _JSON: http://www.json.org/

.. kate: hl reStructuredText
