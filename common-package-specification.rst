============================================
        Common Package Specification
============================================

:Version: 0.2

This document describes the schema for Common Package Specification files. A Common Package Specification file (hereafter "CPS") is a mechanism for describing how users may consume a package. "User" here refers to another package, not an end user. CPS deals with building software.

CPS is based on `JSON`_. A CPS file is a valid JSON object.

.. raw:: html

  <style>
    html {
      color: black;
      background: white;
      font-family: sans;
    }
    table.docinfo { margin: 2em 0; }
    p, li { text-align: justify; }
    .section .section { padding: 0 2em; }
    .title {
      padding: 0.1em;
      box-shadow: 0 0.3em 0.2em #ddd;
      border: 1px solid #eee;
      border-radius: 0.3em;
      background: #f8f8f8;
    }
    h3 {
      padding: 0.2em;
      border: 0 solid #aaa;
      border-width: 0.1em 0;
      background: #eee;
    }
    code.type { color: #172; font-weight: bold; }
    code.keyword { color: #621; font-weight: bold; }
    code.string { color: #d32; }
    code.attribute { color: #15a; }
    code.object { color: #294; }
    code.object:before { content: "<"; }
    code.object:after { content: ">"; }
    .applies-to { font-size: 80%; color: #777; }

  </style>

.. role:: applies-to
    :class: applies-to

.. role:: object(code)
    :class: object

.. role:: attribute(code)
    :class: attribute

.. role:: keyword(code)
    :class: keyword

.. role:: type(code)
    :class: type

.. role:: string(code)
    :class: string

.. contents::

History
=======

In the beginning, there was anarchy. Building a project which consumed a different, external project typically involved hand coding build directives based on assumptions where the external would be located.

Along came pkg-config. This was an improvement, but it was designed for UNIX-like platforms and isn't entirely portable. Also, while pkg-config does an adequate job describing the necessary compile and link flags to consume a package, this information is not always sufficient.

Some time later, CMake entered the scene, eventually gaining its own mechanism to describe a package. While this system solved many earlier problems, it relies on the CMake language and is therefore tightly coupled to that build system.

CPS attempts to solve these issues by taking the lessons learned by CMake and providing compatible information in a format that is not tied to the language of a particular build system.

Overview
========

A CPS file provides a description of a package that is intended to be consumed by other packages that build against that package. By providing a detailed, flexible, and language-agnostic description, CPS aims to make it easy to portably consume packages, regardless of build systems used.

Like pkg-config files and CMake package configuration files, CPS files are intended to be produced by the package provider, and included in the package's distribution. Additionally, the CPS file is not intended to cover all possible configurations of a package; rather, it is meant to be generated by the build system and to describe the artifacts for a single architecture.

Package Schema
==============

Objects
'''''''

:object:`Package`
-----------------

The root of a CPS document is a :object:`package` object. A :object:`package` object describes a single package.

:object:`Requirement`
---------------------

A :object:`requirement` describes the specifics of a package dependency.

:object:`Component`
-------------------

A :object:`component` is a consumable part of a package. Typical components include libraries and executables.

:object:`Configuration`
-----------------------

A :object:`configuration` holds attributes that are specific to a particular configuration of a :object:`component`.

Attributes
''''''''''

An optional attribute may have the value :keyword:`null`. This shall be equivalent to omitting the attribute.

:attribute:`Compat-Version`
---------------------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies the oldest version of the package with which this version is compatible. This information is used when a consumer requests a specific version. If the version requested is equal to or newer than the :attribute:`Compat-Version`, the package may be used.

If not specified, the package is not compatible with previous versions (i.e. :attribute:`Compat-Version` is implicitly equal to :attribute:`Version`).

:attribute:`Compile-Flags`
--------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of additional flags that must be supplied to the compiler when compiling code that consumes the component.

:attribute:`Components`
-----------------------

:Type: :type:`map` of :type:`string` to :object:`component`
:Applies To: :object:`package`
:Required: Yes

Specifies the components which the package provides. Keys are the component names.

:attribute:`Configurations`
---------------------------

:attribute:`Default-Components`
-------------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies a list of components that should be inferred if a consumer specifies a dependency on a package, but not a specific component.

If a package does not have :attribute:`Default-Components`, an attempt to use the package without specifying a component shall be an error.

:attribute:`Default-Configuration`
----------------------------------

:Type: String
:Applies To: Package
:Required: Depends

Specifies the configuration that will be used if the consumer does not otherwise select a configuration.

See Configurations_ for a detailed discussion on when this attribute is required.

:attribute:`Definitions`
------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of compile definitions that must be defined when compiling code that consumes the component.

:attribute:`Hints`
------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`requirement`
:Required: No

Specifies a list of paths where a required dependency might be located. When given, this will usually provide the location of the dependency as it was consumed by the package when the package was built, so that consumers can easily find (correct) dependencies if they are in a location that is not searched by default.

:attribute:`Includes`
---------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of directories which should be added to the include search path when compiling code that consumes the component. If a path starts with ``@prefix@``, the package's install prefix is substituted (see `Package Searching`_). This is recommended, as it allows packages to be relocatable.

:attribute:`Link-Flags`
-----------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of additional flags that must be supplied to the linker when linking code that consumes the component.

:attribute:`Link-Libraries`
---------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies a list of additional libraries that must be linked against when linking code that consumes the component. (Note that packages should avoid using this attribute if at all possible. Use `Requires (Component)`_ instead whenever possible.)

:attribute:`Location`
---------------------

:Type: :type:`string`
:Applies To: :object:`component`
:Required: Depends

Specifies the location of the component. The exact meaning of this attribute depends on the component type, but typically it provides the path to the component's primary artifact, such as a ``.so`` or ``.jar``.

If the path starts with ``@prefix@``, the package's install prefix is substituted (see `Package Searching`_). This is recommended, as it allows packages to be relocatable.

This attribute is required for :object:`component`\ s that are not of :string:`"interface"` :attribute:`Type`.

:attribute:`Name`
-----------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: Yes

Specifies the canonical name of the package. In order for searching to succeed, this must exactly match the name of the CPS file without the ``.cps`` suffix.

:attribute:`Requires` :applies-to:`(Component)`
-----------------------------------------------

:Type: :type:`list` of :type:`string`
:Applies To: :object:`component`, :object:`configuration`
:Required: No

Specifies additional components required by a component. This is used, for example, to indicate transitive dependencies. Relative component paths are interpreted relative to the current package. Absolute component paths must refer to a package required by this package (see `Requires (Package)`_).

:attribute:`Requires` :applies-to:`(Package)`
---------------------------------------------

:Type: :type:`map` of :type:`string` to :object:`requirement`
:Applies To: :object:`package`
:Required: No

Specifies additional packages that are required by this package. Keys are the name of another required package. Values are a valid :object:`requirement` object or :keyword:`null` (equivalent to an empty :object:`requirement` object) describing the package required.

:attribute:`Type`
-----------------

:Type: :type:`string` (restricted)
:Applies To: :object:`component`
:Required: Yes

Specifies the type of a component. The component type affects how the component may be used. Officially supported values are :string:`"archive"` (C/C++ static library), :string:`"dylib"` (C/C++ shared library), :string:`"module"` (C/C++ plugin library), :string:`"jar"` (Java Archive), and :string:`"interface"`. If the type is not recognized by the parser, the component shall be ignored. (Parsers are permitted to support additional types as a conforming extension.)

A :string:`"dylib"` is meant to be linked at compile time; the :attribute:`Location` specifies the artifact required for such linking (i.e. the import library on PE platforms). A :string:`"module"` is meant to be loaded at run time with :code:`dlopen` or similar; again, the :attribute:`Location` specifies the appropriate artifact.

An :string:`"interface"` component is a special case; it may have the usual attributes of a component, but does not have a location. This can be used to create "virtual" components that do not have an associated artifact.

:attribute:`Version` :applies-to:`(Package)`
--------------------------------------------

:Type: :type:`string`
:Applies To: :object:`package`
:Required: No

Specifies the version of the package. Although there is no restriction on the format of the version text, successful version matching may impose restrictions.

If not provided, the CPS will not satisfy any request for a specific version of the package.

:attribute:`Version` :applies-to:`(Requirement)`
------------------------------------------------

:Type: :type:`string`
:Applies To: :object:`requirement`
:Required: No

Specifies the required version of a package. If omitted, any version of the required package is acceptable. Semantics are the same as for the :attribute:`Version` attribute of a :object:`package`.

Package Configurations
======================

Configurations provide a mechanism for a package to provide multiple configurations from a single distribution. Such configurations might include separate debug and release libraries, builds with and without thread safety, and so forth. The possible configurations are determined by each individual package, and it is left to the consumer to decide when and how to select a non-default configuration.

The value of an attribute for a component may be determined in several ways:

- If the consumer has specified a configuration of the package to be used, and if the component has the specified configuration, and if such :object:`configuration` has the requested attribute, then the attribute for the requested configuration is used.
- If the package has a :attribute:`Default-Configuration`, and if the has the specified :attribute:`Default-Configuration`, and if such :object:`configuration` has the requested attribute, then the attribute for the :attribute:`Default-Configuration` is used.
- If the :object:`component` directly has the requested attribute, that value is used.

The attribute value is the first of the above for which the attribute exists. A value of :keyword:`null` satisfies the condition of having the attribute. If the attribute is not found, and is a required attribute, then the CPS is ill-formed.

There are some important implications to this logic. First, a configuration-specific value of an attribute overrides the value directly on the :object:`component`, if any. Second, if a :attribute:`Default-Configuration` is specified, the :object:`component` may omit a required attribute as long as the :attribute:`Default-Configuration` exists for that component and provides a value for the attribute. Correspondingly, a package that does this therefore requires a :attribute:`Default-Configuration`.

Package Searching
=================

- ``<prefix>/<libdir>/<name>/cps/<name>.cps``
- ``<prefix>/<libdir>/cps/<name>/<name>.cps``
- ``<prefix>/<libdir>/cps/<name>.cps``
- ``<prefix>/share/<name>/cps/<name>.cps``
- ``<prefix>/share/cps/<name>/<name>.cps``
- ``<prefix>/share/cps/<name>.cps``

The placeholder ``<name>`` shall represent the name of the package to be located. The placeholder ``<libdir>`` shall be the platform defined directory, sans root prefix, in which libraries reside (e.g. ``lib``, ``lib32``, ``lib64``, ``lib/i386-linux-gnu``...). The placeholder ``<prefix>`` shall represent one of the set of default install prefixes to be searched, which shall include, at minimum and in order, the set of ``:``-separated paths in the environment variable ``CPS_PATH``, ``/usr/local``, and ``/usr``.

.. TODO describe how to find .cps files

.. _JSON: http://www.json.org/

.. kate: hl reStructuredText
